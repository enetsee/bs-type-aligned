// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function Make(X) {
  var empty = X.empty;
  var singleton = X.singleton;
  var append = function (xs, ys) {
    var match = viewLeft(xs);
    if (match) {
      var match$1 = match[0];
      return cons(match$1[0], append(match$1[1], ys));
    } else {
      return ys;
    }
  };
  var cons = function (l, r) {
    var match = X.consOrSnoc;
    if (typeof match === "number" || match[0] !== 748545553) {
      return append(Curry._1(singleton, l), r);
    } else {
      return Curry._2(match[1], l, r);
    }
  };
  var snoc = function (l, r) {
    var match = X.consOrSnoc;
    if (typeof match === "number" || match[0] !== 925929103) {
      return append(l, Curry._1(singleton, r));
    } else {
      return Curry._2(match[1], l, r);
    }
  };
  var viewLeft = function (xs) {
    var match = X.view;
    if (typeof match !== "number" && match[0] === 847852583) {
      return Curry._1(match[1], xs);
    }
    var match$1 = viewRight(xs);
    if (match$1) {
      var match$2 = match$1[0];
      var next = match$2[1];
      var match$3 = viewLeft(match$2[0]);
      if (match$3) {
        var match$4 = match$3[0];
        return /* ConsL */[/* tuple */[
                  match$4[0],
                  snoc(match$4[1], next)
                ]];
      } else {
        return /* ConsL */[/* tuple */[
                  next,
                  empty
                ]];
      }
    } else {
      return /* EmptyL */0;
    }
  };
  var viewRight = function (xs) {
    var match = X.view;
    if (typeof match !== "number" && match[0] === -57574468) {
      return Curry._1(match[1], xs);
    }
    var match$1 = viewLeft(xs);
    if (match$1) {
      var match$2 = match$1[0];
      var next = match$2[0];
      var match$3 = viewRight(match$2[1]);
      if (match$3) {
        var match$4 = match$3[0];
        return /* ConsR */[/* tuple */[
                  cons(next, match$4[0]),
                  match$4[1]
                ]];
      } else {
        return /* ConsR */[/* tuple */[
                  empty,
                  next
                ]];
      }
    } else {
      return /* EmptyR */0;
    }
  };
  return {
          empty: empty,
          singleton: singleton,
          cons: cons,
          snoc: snoc,
          viewLeft: viewLeft,
          viewRight: viewRight
        };
}

exports.Make = Make;
/* No side effect */
